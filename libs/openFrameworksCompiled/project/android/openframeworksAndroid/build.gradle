apply plugin: 'com.android.library'
// pointing to cmake's source code for the same project
def PRJ_SRC_ROOT = './'

android {
    compileSdkVersion 30
    ndkPath "/Users/eyenine/Documents/android-ndk-r21e"  // Point to your own NDK if wanted else
    ndkVersion '21.4.7075529' //NDK will automatically sideload with this

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile "${PRJ_SRC_ROOT}/AndroidManifest.xml"
//            java.srcDirs = ["${PRJ_SRC_ROOT}/java"]
//            res.srcDirs = ["${PRJ_SRC_ROOT}/res"]
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'Android.mk'
        }
    }
    flavorDimensions "abi"
    productFlavors {
        arm7 {
            dimension "abi"
            ndk.abiFilters 'armeabi-v7a'
        }
        x86 {
            dimension "abi"
            ndk.abiFilters 'x86'
        }

        arm64 {
            dimension "abi"
            ndk.abiFilters 'arm64-v8a'
        }

        x86_64 {
            dimension "abi"
            ndk.abiFilters 'x86_64'
        }
    }

}

dependencies {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

}


//def ofRoot(){ return '../../../../' }
//final ofSource = ofRoot() + 'libs/openFrameworks'
//final ofLibs = ofRoot() + 'libs'
//final addons = ofRoot() + 'addons'
//
//// Load common functions
//
//apply plugin: 'com.android.library'
//
//apply from: "common-functions.gradle"
//// pointing to cmake's source code for the same project
//def PRJ_SRC_ROOT = './src/main'
//
//android {
//    compileSdkVersion 30
//    ndkPath "/Users/eyenine/Documents/android-ndk-r21e"  // Point to your own NDK if wanted else
//    ndkVersion '21.4.7075529' //NDK will automatically sideload with this
//
//    defaultConfig {
//        minSdkVersion 21
//        targetSdkVersion 30
//        versionCode 1
//        versionName "1.0"
//        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//        ndk {
//            moduleName "openFrameworksLib"
////            toolchain buildToolchain()
////            stl compilerStl()
//        }
//    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'),
//                    'proguard-rules.pro'
//        }
//    }
//    sourceSets {
//        main {
//            manifest.srcFile "${PRJ_SRC_ROOT}/AndroidManifest.xml"
//            java.srcDirs = ["${PRJ_SRC_ROOT}/java"]
//            res.srcDirs = ["${PRJ_SRC_ROOT}/res"]
//
//        }
//    }
//    externalNativeBuild {
//        ndkBuild {
//            path 'Android.mk'
//        }
//    }
//    flavorDimensions "abi"
//    productFlavors {
//        arm7 {
//            dimension "abi"
//            ndk.abiFilters 'armeabi-v7a'
//        }
//        x86 {
//            dimension "abi"
//            ndk.abiFilters 'x86'
//        }
//
//        arm64 {
//            dimension "abi"
//            ndk.abiFilters 'arm64-v8a'
//        }
//
//        x86_64 {
//            dimension "abi"
//            ndk.abiFilters 'x86_64'
//
////            externalNativeBuild {
////                ldFlags.addAll(coreLdFlags(abi, ofRoot()))
////                cppFlags.addAll(coreCppFlags(abi, ofRoot()))
////                ldLibs.addAll(coreLdLibs(abi, ofRoot()))
////                ldFlags.addAll(coreLdFlags(abi, ofRoot()))
////            }
//
//        }
//    }
//
//}
//
//dependencies {
//    sourceCompatibility = JavaVersion.VERSION_1_8
//    targetCompatibility = JavaVersion.VERSION_1_8
//
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
//
//}
//
////model {
////    android {
////        sources {
////            main {
////                jni {
////                    source {
////                        srcDirs = [
////                                ofSource
////                        ]
////                        excludes = ["**/ofQtUtils.cpp",
////                                    "**/ofQuickTimeGrabber.cpp",
////                                    "**/ofQuickTimePlayer.cpp",
////                                    "**/ofDirectShowGrabber.cpp",
////                                    "**/ofDirectShowPlayer.cpp",
////                                    "**/ofGstUtils.cpp",
////                                    "**/ofGstVideoGrabber.cpp",
////                                    "**/ofGstVideoPlayer.cpp",
////                                    "**/ofAppGlutWindow.cpp",
////                                    "**/ofAppEGLWindow.cpp",
////                                    "**/ofAppGLFWWindow.cpp",
////                                    "**/ofCairoRenderer.cpp",
////                                    "**/ofFmodSoundPlayer.cpp",
////                                    "**/ofOpenALSoundPlayer.cpp",
////                                    "**/ofRtAudioSoundStream.cpp",
////                                    "**/glew/**/*",
////                                    "**/videoInput/**/*",
////                                    "**/fmod/**/*",
////                                    "**/kiss/**/*",
////                                    "**/assimp/**/*",
////                                    "**/portaudio/**/*",
////                                    "**/rtAudio/**/*",
////                                    "**/poco/lib/**/*",
////                                    "**/openssl/lib/**/*",
////                                    "**/boost/include/boost/**/*",
////                                    "**/curl/**/*"
////                        ]
////                    }
////                }
////            }
////        }
////    }
////
////    android.productFlavors {
////        getAbis().each { abi ->
////            create(getFlavorName(abi)) {
////                ndk {
////                    abiFilters.add(abi)
////                    cppFlags.addAll(coreCppFlags(abi, ofRoot()))
////                    ldLibs.addAll(coreLdLibs(abi, ofRoot()))
////                    ldFlags.addAll(coreLdFlags(abi, ofRoot()))
////                }
////            }
////        }
////    }
////}
