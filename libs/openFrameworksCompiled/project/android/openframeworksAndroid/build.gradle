plugins {
    id  'com.android.library'
}

// pointing to cmake's source code for the same project
def PRJ_SRC_ROOT = './'
def ofRoot(){ return '../../../../' }
final ofSource = ofRoot() + 'libs/openFrameworks'
final ofLibs = ofRoot() + 'libs'
final addons = ofRoot() + 'addons'
def OFX_ANDROID = ofRoot() + 'addons/ofxAndroid'
final ofLibOutput = ofRoot() + 'libs/openFrameworksCompiled/lib/android'
def LIB_OUTPUT=ofRoot() + './../../../../libs/openFrameworksCompiled/lib/android'


android {
    compileSdkVersion 31
    //ndkPath "/Users/~/Documents/android-ndk-r21e"  // Point to your own NDK if needed
    ndkVersion '22.1.7171670' //NDK will automatically sideload with this

//    buildFeatures {
//        prefab true ""
//    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 11
        versionName '11'
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

        externalNativeBuild {
            if (!project.hasProperty("ndkBuild")) {
                cmake {
                    arguments "-DANDROID_STL=c++_shared"
                }
            } else {
                ndkBuild {

                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile "${PRJ_SRC_ROOT}/AndroidManifest.xml"
            java.srcDirs = ["${OFX_ANDROID}/java"]
//            res.srcDirs = ["${PRJ_SRC_ROOT}/res"]
        }
    }
    externalNativeBuild {
        if (!project.hasProperty("ndkBuild")) {
            cmake {
                path "CMakeLists.txt"
            }
        } else {
            ndkBuild {
                path "Android.mk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '31.0.0'
    ndkVersion '22.1.7171670'

    // Enable generation of Prefab packages and include them in the library's AAR.
    buildFeatures {
        prefabPublishing true
    }

    // Include the "mylibrary" module from the native build system in the AAR,
    // and export the headers in src/main/cpp/include to its consumers
    prefab {
        openFrameworksAndroid {
            //headers "src/main/cpp/include"
        }
    }

    // Avoid packing the unnecessary libraries into final AAR. For details
    // refer to https://issuetracker.google.com/issues/168777344#comment5
    // Note that if your AAR also contains Java/Kotlin APIs, you should not
    // exclude libraries that are used by those APIs.
    packagingOptions {
        exclude("**/libopenFrameworksAndroid.so")
        exclude("**/classes.jar")
    }
}

dependencies {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

}